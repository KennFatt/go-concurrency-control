// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-cc/ent/seat"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SeatCreate is the builder for creating a Seat entity.
type SeatCreate struct {
	config
	mutation *SeatMutation
	hooks    []Hook
}

// SetIsBooked sets the "is_booked" field.
func (sc *SeatCreate) SetIsBooked(b bool) *SeatCreate {
	sc.mutation.SetIsBooked(b)
	return sc
}

// SetNillableIsBooked sets the "is_booked" field if the given value is not nil.
func (sc *SeatCreate) SetNillableIsBooked(b *bool) *SeatCreate {
	if b != nil {
		sc.SetIsBooked(*b)
	}
	return sc
}

// SetPassangerName sets the "passanger_name" field.
func (sc *SeatCreate) SetPassangerName(s string) *SeatCreate {
	sc.mutation.SetPassangerName(s)
	return sc
}

// SetNillablePassangerName sets the "passanger_name" field if the given value is not nil.
func (sc *SeatCreate) SetNillablePassangerName(s *string) *SeatCreate {
	if s != nil {
		sc.SetPassangerName(*s)
	}
	return sc
}

// SetVersion sets the "version" field.
func (sc *SeatCreate) SetVersion(u uint64) *SeatCreate {
	sc.mutation.SetVersion(u)
	return sc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (sc *SeatCreate) SetNillableVersion(u *uint64) *SeatCreate {
	if u != nil {
		sc.SetVersion(*u)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SeatCreate) SetID(i int) *SeatCreate {
	sc.mutation.SetID(i)
	return sc
}

// Mutation returns the SeatMutation object of the builder.
func (sc *SeatCreate) Mutation() *SeatMutation {
	return sc.mutation
}

// Save creates the Seat in the database.
func (sc *SeatCreate) Save(ctx context.Context) (*Seat, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SeatCreate) SaveX(ctx context.Context) *Seat {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SeatCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SeatCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SeatCreate) defaults() {
	if _, ok := sc.mutation.IsBooked(); !ok {
		v := seat.DefaultIsBooked
		sc.mutation.SetIsBooked(v)
	}
	if _, ok := sc.mutation.Version(); !ok {
		v := seat.DefaultVersion
		sc.mutation.SetVersion(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SeatCreate) check() error {
	if _, ok := sc.mutation.IsBooked(); !ok {
		return &ValidationError{Name: "is_booked", err: errors.New(`ent: missing required field "Seat.is_booked"`)}
	}
	return nil
}

func (sc *SeatCreate) sqlSave(ctx context.Context) (*Seat, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SeatCreate) createSpec() (*Seat, *sqlgraph.CreateSpec) {
	var (
		_node = &Seat{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(seat.Table, sqlgraph.NewFieldSpec(seat.FieldID, field.TypeInt))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.IsBooked(); ok {
		_spec.SetField(seat.FieldIsBooked, field.TypeBool, value)
		_node.IsBooked = value
	}
	if value, ok := sc.mutation.PassangerName(); ok {
		_spec.SetField(seat.FieldPassangerName, field.TypeString, value)
		_node.PassangerName = &value
	}
	if value, ok := sc.mutation.Version(); ok {
		_spec.SetField(seat.FieldVersion, field.TypeUint64, value)
		_node.Version = value
	}
	return _node, _spec
}

// SeatCreateBulk is the builder for creating many Seat entities in bulk.
type SeatCreateBulk struct {
	config
	err      error
	builders []*SeatCreate
}

// Save creates the Seat entities in the database.
func (scb *SeatCreateBulk) Save(ctx context.Context) ([]*Seat, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Seat, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SeatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SeatCreateBulk) SaveX(ctx context.Context) []*Seat {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SeatCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SeatCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
