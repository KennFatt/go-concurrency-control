// Code generated by ent, DO NOT EDIT.

package seat

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the seat type in the database.
	Label = "seat"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldIsBooked holds the string denoting the is_booked field in the database.
	FieldIsBooked = "is_booked"
	// FieldPassengerName holds the string denoting the passenger_name field in the database.
	FieldPassengerName = "passenger_name"
	// Table holds the table name of the seat in the database.
	Table = "seats"
)

// Columns holds all SQL columns for seat fields.
var Columns = []string{
	FieldID,
	FieldVersion,
	FieldIsBooked,
	FieldPassengerName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "go-cc/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion uint64
	// DefaultIsBooked holds the default value on creation for the "is_booked" field.
	DefaultIsBooked bool
)

// OrderOption defines the ordering options for the Seat queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByIsBooked orders the results by the is_booked field.
func ByIsBooked(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsBooked, opts...).ToFunc()
}

// ByPassengerName orders the results by the passenger_name field.
func ByPassengerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassengerName, opts...).ToFunc()
}
