// Code generated by ent, DO NOT EDIT.

package seat

import (
	"go-cc/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Seat {
	return predicate.Seat(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Seat {
	return predicate.Seat(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Seat {
	return predicate.Seat(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Seat {
	return predicate.Seat(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Seat {
	return predicate.Seat(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Seat {
	return predicate.Seat(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Seat {
	return predicate.Seat(sql.FieldLTE(FieldID, id))
}

// IsBooked applies equality check predicate on the "is_booked" field. It's identical to IsBookedEQ.
func IsBooked(v bool) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldIsBooked, v))
}

// PassengerName applies equality check predicate on the "passenger_name" field. It's identical to PassengerNameEQ.
func PassengerName(v string) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldPassengerName, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v uint64) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldVersion, v))
}

// IsBookedEQ applies the EQ predicate on the "is_booked" field.
func IsBookedEQ(v bool) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldIsBooked, v))
}

// IsBookedNEQ applies the NEQ predicate on the "is_booked" field.
func IsBookedNEQ(v bool) predicate.Seat {
	return predicate.Seat(sql.FieldNEQ(FieldIsBooked, v))
}

// PassengerNameEQ applies the EQ predicate on the "passenger_name" field.
func PassengerNameEQ(v string) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldPassengerName, v))
}

// PassengerNameNEQ applies the NEQ predicate on the "passenger_name" field.
func PassengerNameNEQ(v string) predicate.Seat {
	return predicate.Seat(sql.FieldNEQ(FieldPassengerName, v))
}

// PassengerNameIn applies the In predicate on the "passenger_name" field.
func PassengerNameIn(vs ...string) predicate.Seat {
	return predicate.Seat(sql.FieldIn(FieldPassengerName, vs...))
}

// PassengerNameNotIn applies the NotIn predicate on the "passenger_name" field.
func PassengerNameNotIn(vs ...string) predicate.Seat {
	return predicate.Seat(sql.FieldNotIn(FieldPassengerName, vs...))
}

// PassengerNameGT applies the GT predicate on the "passenger_name" field.
func PassengerNameGT(v string) predicate.Seat {
	return predicate.Seat(sql.FieldGT(FieldPassengerName, v))
}

// PassengerNameGTE applies the GTE predicate on the "passenger_name" field.
func PassengerNameGTE(v string) predicate.Seat {
	return predicate.Seat(sql.FieldGTE(FieldPassengerName, v))
}

// PassengerNameLT applies the LT predicate on the "passenger_name" field.
func PassengerNameLT(v string) predicate.Seat {
	return predicate.Seat(sql.FieldLT(FieldPassengerName, v))
}

// PassengerNameLTE applies the LTE predicate on the "passenger_name" field.
func PassengerNameLTE(v string) predicate.Seat {
	return predicate.Seat(sql.FieldLTE(FieldPassengerName, v))
}

// PassengerNameContains applies the Contains predicate on the "passenger_name" field.
func PassengerNameContains(v string) predicate.Seat {
	return predicate.Seat(sql.FieldContains(FieldPassengerName, v))
}

// PassengerNameHasPrefix applies the HasPrefix predicate on the "passenger_name" field.
func PassengerNameHasPrefix(v string) predicate.Seat {
	return predicate.Seat(sql.FieldHasPrefix(FieldPassengerName, v))
}

// PassengerNameHasSuffix applies the HasSuffix predicate on the "passenger_name" field.
func PassengerNameHasSuffix(v string) predicate.Seat {
	return predicate.Seat(sql.FieldHasSuffix(FieldPassengerName, v))
}

// PassengerNameIsNil applies the IsNil predicate on the "passenger_name" field.
func PassengerNameIsNil() predicate.Seat {
	return predicate.Seat(sql.FieldIsNull(FieldPassengerName))
}

// PassengerNameNotNil applies the NotNil predicate on the "passenger_name" field.
func PassengerNameNotNil() predicate.Seat {
	return predicate.Seat(sql.FieldNotNull(FieldPassengerName))
}

// PassengerNameEqualFold applies the EqualFold predicate on the "passenger_name" field.
func PassengerNameEqualFold(v string) predicate.Seat {
	return predicate.Seat(sql.FieldEqualFold(FieldPassengerName, v))
}

// PassengerNameContainsFold applies the ContainsFold predicate on the "passenger_name" field.
func PassengerNameContainsFold(v string) predicate.Seat {
	return predicate.Seat(sql.FieldContainsFold(FieldPassengerName, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v uint64) predicate.Seat {
	return predicate.Seat(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v uint64) predicate.Seat {
	return predicate.Seat(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...uint64) predicate.Seat {
	return predicate.Seat(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...uint64) predicate.Seat {
	return predicate.Seat(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v uint64) predicate.Seat {
	return predicate.Seat(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v uint64) predicate.Seat {
	return predicate.Seat(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v uint64) predicate.Seat {
	return predicate.Seat(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v uint64) predicate.Seat {
	return predicate.Seat(sql.FieldLTE(FieldVersion, v))
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.Seat {
	return predicate.Seat(sql.FieldIsNull(FieldVersion))
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.Seat {
	return predicate.Seat(sql.FieldNotNull(FieldVersion))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Seat) predicate.Seat {
	return predicate.Seat(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Seat) predicate.Seat {
	return predicate.Seat(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Seat) predicate.Seat {
	return predicate.Seat(sql.NotPredicates(p))
}
